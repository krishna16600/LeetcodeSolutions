
/*

Time complexity of canMake function will be 2^n, but we can further memoize it using a map.
*/
import java.util.*;

public class Main
{
    static boolean canMakeDP(ArrayList<String> list, String word){
        boolean[] dp = new boolean[word.length()+1];
        
        dp[0]=true;
        
        for(int len=1; len<=word.length();len++){
            for(int i=0; i<len; i++){
                if(dp[i] && list.contains(word.substring(i,len))){
                    dp[len]=true;
                    break;
                }
            }
        }
        return dp[word.length()];
    }
    static boolean canMakeMemoize(ArrayList<String> list, String word, HashMap<String,Boolean> map){
        if(word.length()==0)
            return true;
        
        if(map.containsKey(word))
            return map.get(word);
            
        
        for(int i=1;i<=word.length();i++){
            if(list.contains(word.substring(0,i)) && canMake(list, word.substring(i,word.length()))){
                map.put(word.substring(i,word.length()),true);
                return true;
            }
        }
        map.put(word,false);
        return false; 
    } 
    static boolean canMake(ArrayList<String> list, String word){
       HashMap<String,Boolean> map = new HashMap<>();
       return canMakeMemoize(list,word,map);
    }
	public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        ArrayList<String> list = new ArrayList<>();
        
        for(int i=0;i<n;i++)
            list.add(sc.next());
        
        String s = sc.next();
        
        System.out.println(canMakeDP(list,s));
	}
}
